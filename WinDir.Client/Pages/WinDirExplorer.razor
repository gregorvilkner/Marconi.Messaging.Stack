@page "/WinDirExplorer"
@using WinDir.GraphQLSchema.GraphQLModel;
@using Newtonsoft.Json.Linq;
@using global::GraphQL.NewtonsoftJson;
@using global::GraphQL.Transport;
@inject WinDirService aWinDirService;

@using MW.Blazor

<form>
    <div class="input-group">
        <input type="text" class="form-control" @bind="@uaUri" placeholder="Enter Starting Directory" aria-label="uri">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="ConnectAsync">Connect</button>
        </div>
    </div>
</form>

<br />

<Tree Nodes="Items"
      ChildSelector="node => node.Childs"
@bind-SelectedNode="selectedNode"
@bind-ExpandedNodes="ExpandedNodes"
      OnNodeExpand="OnNodeExpand"
      HasChildNodes="node => node.Childs?.Any() == true"
      NodeDisabled="node => node.Disabled">
    <TitleTemplate>
        @context.Text @(
        context.Childs.Count > 0 ? $"(x {context.Childs.Count})" : ""
        )
    </TitleTemplate>
</Tree>


@code {
    string uaUri = "c:\\\\Program Files";

    //https://github.com/mwinkler/Blazor.Components/blob/master/example/ComponentsDemo/TreeSample.razor
    public class Item
    {
        public string Text { get; set; }
        public List<Item> Childs { get; set; }
        public bool Disabled { get; set; }
        public QLFolder qLFolder { get; set; }
        public bool HasBeenCounted { get; set; }
    }

    List<Item> Items = new List<Item>();
    IList<Item> ExpandedNodes = new List<Item>();
    Item selectedNode = null;

    async Task OnNodeExpand(Item item)
    {

        await BrowseNodes(item.Childs.Where(x => !x.HasBeenCounted).ToList());
    }

    protected async Task BrowseNodes(List<Item> aItemList)
    {
        var folderUrlListString = String.Join(",", aItemList.Select(x => $"\"{x.qLFolder.dir.Replace("\\", "\\\\")}\""));

        var queryBrowse = new GraphQLRequest
            {
                Query = $"{{ folders(aFolderDirList: [{folderUrlListString}]) {{ name dir folders {{ name dir }} }} }}"
            };

        var aResultList = await aWinDirService.GetBrowseFoldersAsync(queryBrowse);

        var stupidCounter = 0;
        foreach (var aFolder in aResultList)
        {
            var aItem = aItemList[stupidCounter];
            foreach (var aResult in aFolder.folders)
            {
                var aChildItem = new Item
                    {
                        Text = aResult.name,
                        Childs = new List<Item>(),
                        Disabled = false,
                        qLFolder = aResult,
                        HasBeenCounted = false
                    };
                aItem.Childs.Add(aChildItem);
            }
            aItem.HasBeenCounted = true;
            stupidCounter++;
        }

    }

    protected override async Task OnInitializedAsync()
    {


    }

    protected async Task ConnectAsync()
    {
        var queryConnect = new GraphQLRequest
            {
                Query = $"{{ folder(aFolderDir: \"{uaUri}\") {{ name dir }} }}"
            };

        var resultConnect = await aWinDirService.GetBrowseFolderAsync(queryConnect);

        var aRootItem = new Item
            {
                Text = resultConnect.name,
                Childs = new List<Item>(),
                Disabled = false,
                qLFolder = new QLFolder { name = resultConnect.name, dir = resultConnect.dir }
            };
        Items.Add(aRootItem);

        await BrowseNodes(new List<Item> { aRootItem });

    }

}

